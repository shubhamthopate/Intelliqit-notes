  
How to Bring Your Own Keys into AWS KMS
For production use cases, the key will be generated by HSM or you will be using a key with more 2048 bits. For this demo, We will use 256-Bit AES Symmetric key. If you dont have one, follow the below instructions to generate one.

Generate the Secret Key
We wil be using openssl to generate a 256-bit symmetric key. You can also use dd command. Now we have a binary key stored in the file plain_text_aes_key.bin

openssl rand -out plain_text_aes_key.bin 32
or
dd if=/dev/random of=plain_text_aes_key.bin count=1 bs=32
AWS KMS GUI
Now that we have our Secret Key, We need to create an entity in KMS to receive our key material.

Create key in the KMS Console
Enter an Alias and a Description
Select External
Check - The "I understandâ€¦" checkbox
Choose the set of IAM users that have permission to Use the KMS APIs and,
Choose the set of IAM users who can Administer the key
Verify the key policy
Download the wrapping key, Choose RSAES_OAEP_SHA_1
The wrapping key is the 2048-bit RSA public key from your AWS account, that will be used to encrypt the 256-bit secret key and import to into KMS.
This additional step ensure, anyone snooping on my network will not be able to get hold of my secret key.
Wrap the Secret Key with wrappingKey
UnZIP and put the wrapping key into the same directory that contains your Secret Key.

openssl rsautl -encrypt \
               -in plain_text_aes_key.bin \
               -oaep \
               -inkey wrappingKey_521a8b4c-8463-4ccd-a762-7bcf6a9b2cfc_1227021858 \
               -pubin \
               -keyform DER \
               -out enc.aes.key
               
               
               
               
encrytp file 

1 echo "my website: https://tech.david-cheong.com" > plaintext.txt
2 openssl rand -out plaintext.bin  32
3 aws kms encrypt --key-id alias/demo --plaintext fileb://plaintext.bin 
4 aws kms encrypt --key-id alias/demo --plaintext fileb://plaintext.txt --query CiphertextBlob --output text | base64 -d > encrypted.txt
5 ls
encrypted.txt	plaintext.bin	plaintext.txt
6 aws kms decrypt --ciphertext-blob fileb://encrypted.txt     
7  aws kms decrypt --ciphertext-blob fileb://encrypted.txt --query Plaintext --output text | base64 -d > decrypted.txt
8 cat decrypted.txt 


Hi Amol,

You had most of the commands ready to go, the only difference was the following:
91. Download the SHA1 wrapping key and import token .zip file from https://console.aws.amazon.com/kms/home?region=us-east-1#/kms/keys/e453217b-cd77-4bff-851f-bab817106545/keyMaterial

Then run the the command you provided in a similar fashion:

openssl rsautl -encrypt -in plain_text_aes_key.bin -oaep -inkey wrappingKey_e453217b-cd77-4bff-851f-bab817106545_05141223 -pubin -keyform DER -out NEW-wrapped-key-material.key

Then I was able to import it using NEW-wrapped-key-material.key + importToken_e453217b-cd77-4bff-851f-bab817106545_05141223 in the console.
